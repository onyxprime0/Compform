function Turtle(x, y) {
  // assign default values to x and y if they were not passed
  if (typeof x === "undefined") {
    x = width * 0.5;
  }
  if (typeof y === "undefined") {
    y = height * 0.5;
  }
  this.x = x;
  this.y = y;
  this.bearingRadians = 0;
  this.isPenDown = true;
  this._stateStack = [];
}

// moveTo instantly transports the turtle to the provided x, y location, drawing a line if pen is down
Turtle.prototype.moveTo = function (newX, newY) {
  if (this.isPenDown) {
    line(this.x, this.y, newX, newY);
  }
  this.x = newX;
  this.y = newY;
};

// moveForward moves the turtle along its current bearing, drawing a line if pen is down
Turtle.prototype.moveForward = function (distance) {
  var newX = this.x + cos(this.bearingRadians) * distance;
  var newY = this.y + sin(this.bearingRadians) * distance;
  this.moveTo(newX, newY);
};

// moveBackward moves the turtle backward from its current bearing, drawing a line if pen is down
Turtle.prototype.moveBackward = function (distance) {
  this.moveForward(-distance);
};

// turnTo changes the turtle's bearing to the provided angle in degrees
Turtle.prototype.turnTo = function (angleDegrees) {
  this.bearingRadians = radians(angleDegrees);
};

// turnRight rotates the turtle's bearing clockwise by the provided angle in degrees
Turtle.prototype.turnRight = function (amountDegrees) {
  this.bearingRadians += radians(amountDegrees);
};

// turnLeft rotates the turtle's bearing counter-clockwise by the provided angle in degrees
Turtle.prototype.turnLeft = function (amountDegrees) {
  this.bearingRadians -= radians(amountDegrees);
};

// penUp tells the turtle to move without drawing
Turtle.prototype.penUp = function () {
  this.isPenDown = false;
};

// penDown tells the turtle to draw a line when it moves
Turtle.prototype.penDown = function () {
  this.isPenDown = true;
};

// pushState records the turtle's current state (position, bearing, etc.) to a stack so that changes can be undone easily
Turtle.prototype.pushState = function () {
  this._stateStack.push({
    x: this.x,
    y: this.y,
    bearingRadians: this.bearingRadians,
    isPenDown: this.isPenDown
  });
};

// popState restores the turtle's state to the top recorded state on the stack
Turtle.prototype.popState = function () {
  if (this._stateStack.length === 0) {
    console.error(
      "Turtle: No states left on stack. Make sure your calls to .pushState and .popState are balanced."
    );
    return;
  }
  var state = this._stateStack.pop();
  this.x = state.x;
  this.y = state.y;
  this.bearingRadians = state.bearingRadians;
  this.isPenDown = state.isPenDown;
};

// image draws and image centered on the turtle's current location and alligned with the turtle's rotation (forward = up)
Turtle.prototype.image = function (i, w, h) {
  // w, h are optional parameters to this function and to p5's image
  // p5's image function will draw the image at its "normal" size if w and h are undefined

  push();
  translate(this.x, this.y);
  rotate(this.bearingRadians + PI * 0.5);
  imageMode(CENTER);
  image(i, 0, 0, w, h);
  pop();
};
////////////////////////////////////
function setup() {
  createCanvas(500, 509);
  colorMode(HSB);
  noLoop();
  myTurtle = new Turtle();
  
}

function draw() {
  background(200, 40, 73);
  myTurtle.penUp();
  myTurtle.moveTo(0, 20);
  myTurtle.penDown();
  sun(700, 100, 170);
  myTurtle.penUp();
  myTurtle.moveTo(1, 500);
  myTurtle.turnLeft(90);
  grass(0, -20);
  soil(0, 5);
  myTurtle.penUp();
    myTurtle.moveTo(300, 500);
    myTurtle.turnTo(-100);
    myTurtle.penDown();
  drawBranch(100);
  myTurtle.penUp();
	myTurtle.moveTo(50, 500);
	myTurtle.turnTo(-90);
	myTurtle.penDown();
	drawBranch(40);
}

function sun(section, steps, angle) {
  stroke(50, 100, 300);
  for (let i = 0; i < section; i++) {
    myTurtle.moveForward(steps);
    myTurtle.turnRight(angle);
  }
}

function soil(begin, length) {
  for (let i = 0; i < 500; i += 1) {
    myTurtle.moveTo(begin + i, 500);
    myTurtle.penDown();
    strokeWeight(2);
    stroke(29, 75, 60);
    myTurtle.moveForward(length);
    myTurtle.penUp();
  }
}

function grass(begin, length) {
  for (let i = 0; i < 500; i += 3) {
    myTurtle.moveTo(begin + i, 500);
    myTurtle.penDown();
    strokeWeight(1);
    stroke(170, 40, 80);
    myTurtle.moveForward(length * 0.5);
    bend(20);
    myTurtle.penUp();
  }
}

function bend(length) {
  const turn = random();
  myTurtle.pushState();
  if (turn < 0.5) {
    console.log('left');
    myTurtle.turnLeft(5);
    myTurtle.moveForward(length * 0.5);
  } else {
    console.log('right');
    myTurtle.turnRight(5);
    myTurtle.moveForward(length * 0.5);
  }
  myTurtle.popState();
}
function drawBranch(length){
  if(length < 10){

    for (var i = 0; i < 3; i++) {
    stroke(170,40,50)
		myTurtle.moveForward(10);
		myTurtle.turnRight(120);
	}
    return;
  }
stroke(15, 105, 30);
  
  myTurtle.moveForward(length * .5);
  //myTurtle.turnLeft(10);
  myTurtle.turnLeft(random(10, 20));
  myTurtle.moveForward(length * .5);

  myTurtle.pushState();
  myTurtle.turnLeft(random(11, 10));
  drawBranch(length * 0.75);
  myTurtle.popState();


  
  myTurtle.pushState();
  myTurtle.turnRight(random(100, 30));
  drawBranch(length * 0.70);

  myTurtle.popState();

}
